



// Generated by Claude 3 Sonnet

import dayjs from "dayjs";

// Utility for dynamic Day.js locale loading
class LocaleLoader {
    private loadedLocales:Set<string>;
    private loadingPromises:Map<string, any>;

  constructor() {
    this.loadedLocales = new Set(['en']); // English is loaded by default
    this.loadingPromises = new Map();
  }

  async loadLocale(locale:string) {
    // Return immediately if locale is already loaded
    if (this.loadedLocales.has(locale)) {
      console.log(`locale ${locale} already loaded`)
      return;
    }

    // Return existing promise if locale is currently loading
    if (this.loadingPromises.has(locale)) {
      return this.loadingPromises.get(locale);
    }

    try {
      // Create and store the loading promise
      const loadingPromise = (async () => {
        // Dynamic import of the locale
        console.log(`Will try to load locale ${locale}`)
        const localeModule = await import(`dayjs/locale/${locale}`);
        
        // Register the locale with dayjs
        dayjs.locale(locale);
        
        // Mark locale as loaded
        this.loadedLocales.add(locale);
        console.log(`locale ${locale} loaded`)
        
        // Clean up the loading promise
        this.loadingPromises.delete(locale);
        
        return locale;
      })();

      this.loadingPromises.set(locale, loadingPromise);
      return loadingPromise;
    } catch (error) {
      console.error(`Failed to load locale ${locale}:`, error);
      throw new Error(`Locale ${locale} not available`);
    }
  }

  formatDate(date:Date, format:string, locale = 'en') {
    return this.loadLocale(locale)
      .then(() => dayjs(date).locale(locale).format(format))
      .catch((error) => {
        console.error(`Error formatting date for locale ${locale}:`, error);
        // Fallback to English if locale loading fails
        return dayjs(date).locale('en').format(format);
      });
  }

  isLocaleLoaded(locale:string) {
    return this.loadedLocales.has(locale);
  }

  getLoadedLocales() {
    return Array.from(this.loadedLocales);
  }
}

export const localeLoader = new LocaleLoader();